class Solution:
    def solveNQueens(self, n: int) -> List[List[str]]:
        arr = [["."] * n for _ in range(n)]
        ans = []
        def create_queenboard(state):
            board = []
            for row in state:
                board.append("".join(row))
            return board
        
        def isSafe(arr,x,y,n):
            for row in range(n):
                if arr[row][y] == "Q":
                    return False
                #For left diagnol
            row = x
            cols = y
            while(row >= 0 and cols >= 0):
                if arr[row][cols] == "Q":
                    return False
                row -= 1
                cols -= 1
            row = x
            cols = y
            while(row >= 0 and cols < n):
                if arr[row][cols] == "Q":
                    return False
                row -= 1
                cols += 1
                    
            return True
        
        def qQueen(arr,x,n):
            if x == n:
                copy = ["".join(row) for row in arr]
                ans.append(copy)
                return
                            
            for cols in range(n):
                if isSafe(arr,x,cols,n):
                    arr[x][cols] = "Q"
                    if qQueen(arr,x+1,n):
                        return True
                    else:arr[x][cols] = "."
            return False
        
        qQueen(arr,0,n)
        return ans 
        
