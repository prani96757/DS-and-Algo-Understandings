class TreeNode:
    def __init__(self, val, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right
    def __repr__(self):
        return 'TreeNode({})'.format(self.val)
        
    
def deserialize(string):
    if string == '{}':
        return None
    nodes = [None if val == 'null' else TreeNode(int(val))
             for val in string.strip('[]{}').split(',')]
    kids = nodes[::-1]
    root = kids.pop()
    for node in nodes:
        if node:
            if kids: node.left  = kids.pop()
            if kids: node.right = kids.pop()
    return root
    
            
def lowestCommonAncestor(root, p, q):
    if root == p or root == q:
            return root
    left = right = None
        
    if root.left:
        left = lowestCommonAncestor(root.left, p, q)
    if root.right:
        right = lowestCommonAncestor(root.right, p, q)
    if left and right:
        return root
    else:
        return left or right
    
if __name__ == '__main__':
    lowestCommonAncestor(deserialize('[3,5,1,6,2,0,8,null,null,7,4]'),5,1)
    
