#DFS
class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        def dfs(matrix,x,y,m,n):
            if x < 0 or y < 0 or x >= m or y >= n or  matrix[x][y] != '1':
                return
            matrix[x][y] = '3'
            dfs(matrix,x-1,y,m,n)
            dfs(matrix,x+1,y,m,n)
            dfs(matrix,x,y-1,m,n)
            dfs(matrix,x,y+1,m,n)
        
        m = len(grid)
        n = len(grid[0])
        count = 0
        for i in range(0,m):
            for j in range(0,n):
                if grid[i][j] == '1':
                    
                    dfs(grid,i,j,m,n)
                    count += 1
                    
        return count
        
        
   #BFS
    class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        if not grid:
            return 0
        rows = len(grid)
        cols = len(grid[0])
        visit = set()
        islands = 0
        def bfs(r,c):
            q = collections.deque()
            visit.add((r,c))
            q.append((r,c))
            while q:
                p,t = q.popleft()
                directions = [[-1,0],[0,-1],[0,1],[1,0]]
                for dr,dc in directions:
                    r,c = p+dr,t+dc
                    if (r in range(rows) and 
                        c in range(cols) and
                        grid[r][c] == '1' and
                       (r,c) not in visit):
                        visit.add((r,c))
                        q.append((r,c))
        for i in range(rows):
            for j in range(cols):
                if grid[i][j] == '1' and (i,j) not in visit:
                    bfs(i,j)
                    islands += 1
                    
        return islands
