class Solution:
    def trap(self, height: List[int]) -> int:
        
        ans = 0
        n = len(height)
        for i in range(1, n-1):
            leftmax, rightmax = 0,0
            for j in range(i, -1,-1):
                leftmax = max(leftmax, height[j])
            for j in range(i+1,n):
                rightmax = max(rightmax, height[j])
            ans += min(leftmax,rightmax) - height[i]
            
        return ans


class Solution:
    def trap(self, height: List[int]) -> int:
        if not height:
            return 0
        n = len(height)
        l,r = 0,n-1
        res = 0
        leftmax, rightmax  = height[l], height[r]
        while l < r:
            if leftmax < rightmax:
                l += 1
                leftmax = max(leftmax, height[l])
                res += leftmax - height[l]
            else:
                r -= 1
                rightmax = max(rightmax,height[r])
                res += rightmax - height[r]
        return res
